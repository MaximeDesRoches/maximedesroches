{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/asap/browser-asap.js","node_modules/asap/browser-raw.js","node_modules/promise/index.js","node_modules/promise/lib/core.js","node_modules/promise/lib/done.js","node_modules/promise/lib/es6-extensions.js","node_modules/promise/lib/finally.js","node_modules/promise/lib/index.js","node_modules/promise/lib/node-extensions.js","node_modules/promise/lib/synchronous.js","src/app/InteractiveVideo.js","src/app/LinearVideo.js","src/app/Main.js","src/app/Step.js","src/app/utils/DrawSVG.min.js","src/app/utils/EventDispatcher.js","src/app/utils/ieDetect.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AClrNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbhlIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9DA;AACA;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;AAEA;;;;;;;;;;AAEA,IAAM,SAAS,4BAAf;;AAEA,SAAS,UAAT,CAAoB,EAApB,EAAwB,EAAxB,EAA4B,CAA5B,EAA+B;AAC9B,qBACK,EADL,SACW,EADX,gBAEK,CAAC,CAFN,mBAGK,CAHL,SAGU,CAHV,eAGsB,IAAI,CAH1B,kBAIK,CAJL,SAIU,CAJV,eAIqB,EAAE,IAAI,CAAN,CAJrB;AAMA;;IAEK,M;AACL,iBAAY,IAAZ,EAAkB;AAAA;;AAAA;;AAAA,OA8ClB,MA9CkB,GA8CT;AAAA,UAAM,MAAK,IAAL,CAAU,OAAhB;AAAA,GA9CS;;AACjB,OAAK,IAAL,GAAY,IAAZ;;AAEA,OAAK,IAAL,GAAY,SAAS,eAAT,CAAyB,MAAzB,EAAiC,MAAjC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","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\n\n// rawAsap provides everything we need except exception management.\nvar rawAsap = require(\"./raw\");\n// RawTasks are recycled to reduce GC churn.\nvar freeTasks = [];\n// We queue errors to ensure they are thrown in right order (FIFO).\n// Array-as-queue is good enough here, since we are just dealing with exceptions.\nvar pendingErrors = [];\nvar requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);\n\nfunction throwFirstError() {\n    if (pendingErrors.length) {\n        throw pendingErrors.shift();\n    }\n}\n\n/**\n * Calls a task as soon as possible after returning, in its own event, with priority\n * over other events like animation, reflow, and repaint. An error thrown from an\n * event will not interrupt, nor even substantially slow down the processing of\n * other events, but will be rather postponed to a lower priority event.\n * @param {{call}} task A callable object, typically a function that takes no\n * arguments.\n */\nmodule.exports = asap;\nfunction asap(task) {\n    var rawTask;\n    if (freeTasks.length) {\n        rawTask = freeTasks.pop();\n    } else {\n        rawTask = new RawTask();\n    }\n    rawTask.task = task;\n    rawAsap(rawTask);\n}\n\n// We wrap tasks with recyclable task objects.  A task object implements\n// `call`, just like a function.\nfunction RawTask() {\n    this.task = null;\n}\n\n// The sole purpose of wrapping the task is to catch the exception and recycle\n// the task object after its single use.\nRawTask.prototype.call = function () {\n    try {\n        this.task.call();\n    } catch (error) {\n        if (asap.onerror) {\n            // This hook exists purely for testing purposes.\n            // Its name will be periodically randomized to break any code that\n            // depends on its existence.\n            asap.onerror(error);\n        } else {\n            // In a web browser, exceptions are not fatal. However, to avoid\n            // slowing down the queue of pending tasks, we rethrow the error in a\n            // lower priority turn.\n            pendingErrors.push(error);\n            requestErrorThrow();\n        }\n    } finally {\n        this.task = null;\n        freeTasks[freeTasks.length] = this;\n    }\n};\n","\"use strict\";\n\n// Use the fastest means possible to execute a task in its own turn, with\n// priority over other events including IO, animation, reflow, and redraw\n// events in browsers.\n//\n// An exception thrown by a task will permanently interrupt the processing of\n// subsequent tasks. The higher level `asap` function ensures that if an\n// exception is thrown by a task, that the task queue will continue flushing as\n// soon as possible, but if you use `rawAsap` directly, you are responsible to\n// either ensure that no exceptions are thrown from your task, or to manually\n// call `rawAsap.requestFlush` if an exception is thrown.\nmodule.exports = rawAsap;\nfunction rawAsap(task) {\n    if (!queue.length) {\n        requestFlush();\n        flushing = true;\n    }\n    // Equivalent to push, but avoids a function call.\n    queue[queue.length] = task;\n}\n\nvar queue = [];\n// Once a flush has been requested, no further calls to `requestFlush` are\n// necessary until the next `flush` completes.\nvar flushing = false;\n// `requestFlush` is an implementation-specific method that attempts to kick\n// off a `flush` event as quickly as possible. `flush` will attempt to exhaust\n// the event queue before yielding to the browser's own event loop.\nvar requestFlush;\n// The position of the next task to execute in the task queue. This is\n// preserved between calls to `flush` so that it can be resumed if\n// a task throws an exception.\nvar index = 0;\n// If a task schedules additional tasks recursively, the task queue can grow\n// unbounded. To prevent memory exhaustion, the task queue will periodically\n// truncate already-completed tasks.\nvar capacity = 1024;\n\n// The flush function processes all tasks that have been scheduled with\n// `rawAsap` unless and until one of those tasks throws an exception.\n// If a task throws an exception, `flush` ensures that its state will remain\n// consistent and will resume where it left off when called again.\n// However, `flush` does not make any arrangements to be called again if an\n// exception is thrown.\nfunction flush() {\n    while (index < queue.length) {\n        var currentIndex = index;\n        // Advance the index before calling the task. This ensures that we will\n        // begin flushing on the next task the task throws an error.\n        index = index + 1;\n        queue[currentIndex].call();\n        // Prevent leaking memory for long chains of recursive calls to `asap`.\n        // If we call `asap` within tasks scheduled by `asap`, the queue will\n        // grow, but to avoid an O(n) walk for every task we execute, we don't\n        // shift tasks off the queue after they have been executed.\n        // Instead, we periodically shift 1024 tasks off the queue.\n        if (index > capacity) {\n            // Manually shift all values starting at the index back to the\n            // beginning of the queue.\n            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {\n                queue[scan] = queue[scan + index];\n            }\n            queue.length -= index;\n            index = 0;\n        }\n    }\n    queue.length = 0;\n    index = 0;\n    flushing = false;\n}\n\n// `requestFlush` is implemented using a strategy based on data collected from\n// every available SauceLabs Selenium web driver worker at time of writing.\n// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593\n\n// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that\n// have WebKitMutationObserver but not un-prefixed MutationObserver.\n// Must use `global` or `self` instead of `window` to work in both frames and web\n// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.\n\n/* globals self */\nvar scope = typeof global !== \"undefined\" ? global : self;\nvar BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver;\n\n// MutationObservers are desirable because they have high priority and work\n// reliably everywhere they are implemented.\n// They are implemented in all modern browsers.\n//\n// - Android 4-4.3\n// - Chrome 26-34\n// - Firefox 14-29\n// - Internet Explorer 11\n// - iPad Safari 6-7.1\n// - iPhone Safari 7-7.1\n// - Safari 6-7\nif (typeof BrowserMutationObserver === \"function\") {\n    requestFlush = makeRequestCallFromMutationObserver(flush);\n\n// MessageChannels are desirable because they give direct access to the HTML\n// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera\n// 11-12, and in web workers in many engines.\n// Although message channels yield to any queued rendering and IO tasks, they\n// would be better than imposing the 4ms delay of timers.\n// However, they do not work reliably in Internet Explorer or Safari.\n\n// Internet Explorer 10 is the only browser that has setImmediate but does\n// not have MutationObservers.\n// Although setImmediate yields to the browser's renderer, it would be\n// preferrable to falling back to setTimeout since it does not have\n// the minimum 4ms penalty.\n// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and\n// Desktop to a lesser extent) that renders both setImmediate and\n// MessageChannel useless for the purposes of ASAP.\n// https://github.com/kriskowal/q/issues/396\n\n// Timers are implemented universally.\n// We fall back to timers in workers in most engines, and in foreground\n// contexts in the following browsers.\n// However, note that even this simple case requires nuances to operate in a\n// broad spectrum of browsers.\n//\n// - Firefox 3-13\n// - Internet Explorer 6-9\n// - iPad Safari 4.3\n// - Lynx 2.8.7\n} else {\n    requestFlush = makeRequestCallFromTimer(flush);\n}\n\n// `requestFlush` requests that the high priority event queue be flushed as\n// soon as possible.\n// This is useful to prevent an error thrown in a task from stalling the event\n// queue if the exception handled by Node.js’s\n// `process.on(\"uncaughtException\")` or by a domain.\nrawAsap.requestFlush = requestFlush;\n\n// To request a high priority event, we induce a mutation observer by toggling\n// the text of a text node between \"1\" and \"-1\".\nfunction makeRequestCallFromMutationObserver(callback) {\n    var toggle = 1;\n    var observer = new BrowserMutationObserver(callback);\n    var node = document.createTextNode(\"\");\n    observer.observe(node, {characterData: true});\n    return function requestCall() {\n        toggle = -toggle;\n        node.data = toggle;\n    };\n}\n\n// The message channel technique was discovered by Malte Ubl and was the\n// original foundation for this library.\n// http://www.nonblocking.io/2011/06/windownexttick.html\n\n// Safari 6.0.5 (at least) intermittently fails to create message ports on a\n// page's first load. Thankfully, this version of Safari supports\n// MutationObservers, so we don't need to fall back in that case.\n\n// function makeRequestCallFromMessageChannel(callback) {\n//     var channel = new MessageChannel();\n//     channel.port1.onmessage = callback;\n//     return function requestCall() {\n//         channel.port2.postMessage(0);\n//     };\n// }\n\n// For reasons explained above, we are also unable to use `setImmediate`\n// under any circumstances.\n// Even if we were, there is another bug in Internet Explorer 10.\n// It is not sufficient to assign `setImmediate` to `requestFlush` because\n// `setImmediate` must be called *by name* and therefore must be wrapped in a\n// closure.\n// Never forget.\n\n// function makeRequestCallFromSetImmediate(callback) {\n//     return function requestCall() {\n//         setImmediate(callback);\n//     };\n// }\n\n// Safari 6.0 has a problem where timers will get lost while the user is\n// scrolling. This problem does not impact ASAP because Safari 6.0 supports\n// mutation observers, so that implementation is used instead.\n// However, if we ever elect to use timers in Safari, the prevalent work-around\n// is to add a scroll event listener that calls for a flush.\n\n// `setTimeout` does not call the passed callback if the delay is less than\n// approximately 7 in web workers in Firefox 8 through 18, and sometimes not\n// even then.\n\nfunction makeRequestCallFromTimer(callback) {\n    return function requestCall() {\n        // We dispatch a timeout with a specified delay of 0 for engines that\n        // can reliably accommodate that request. This will usually be snapped\n        // to a 4 milisecond delay, but once we're flushing, there's no delay\n        // between events.\n        var timeoutHandle = setTimeout(handleTimer, 0);\n        // However, since this timer gets frequently dropped in Firefox\n        // workers, we enlist an interval handle that will try to fire\n        // an event 20 times per second until it succeeds.\n        var intervalHandle = setInterval(handleTimer, 50);\n\n        function handleTimer() {\n            // Whichever timer succeeds will cancel both timers and\n            // execute the callback.\n            clearTimeout(timeoutHandle);\n            clearInterval(intervalHandle);\n            callback();\n        }\n    };\n}\n\n// This is for `asap.js` only.\n// Its name will be periodically randomized to break any code that depends on\n// its existence.\nrawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;\n\n// ASAP was originally a nextTick shim included in Q. This was factored out\n// into this ASAP package. It was later adapted to RSVP which made further\n// amendments. These decisions, particularly to marginalize MessageChannel and\n// to capture the MutationObserver implementation in a closure, were integrated\n// back into ASAP proper.\n// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js\n","'use strict';\n\nmodule.exports = require('./lib')\n","'use strict';\n\nvar asap = require('asap/raw');\n\nfunction noop() {}\n\n// States:\n//\n// 0 - pending\n// 1 - fulfilled with _value\n// 2 - rejected with _value\n// 3 - adopted the state of another promise, _value\n//\n// once the state is no longer pending (0) it is immutable\n\n// All `_` prefixed properties will be reduced to `_{random number}`\n// at build time to obfuscate them and discourage their use.\n// We don't use symbols or Object.defineProperty to fully hide them\n// because the performance isn't good enough.\n\n\n// to avoid using try/catch inside critical functions, we\n// extract them to here.\nvar LAST_ERROR = null;\nvar IS_ERROR = {};\nfunction getThen(obj) {\n  try {\n    return obj.then;\n  } catch (ex) {\n    LAST_ERROR = ex;\n    return IS_ERROR;\n  }\n}\n\nfunction tryCallOne(fn, a) {\n  try {\n    return fn(a);\n  } catch (ex) {\n    LAST_ERROR = ex;\n    return IS_ERROR;\n  }\n}\nfunction tryCallTwo(fn, a, b) {\n  try {\n    fn(a, b);\n  } catch (ex) {\n    LAST_ERROR = ex;\n    return IS_ERROR;\n  }\n}\n\nmodule.exports = Promise;\n\nfunction Promise(fn) {\n  if (typeof this !== 'object') {\n    throw new TypeError('Promises must be constructed via new');\n  }\n  if (typeof fn !== 'function') {\n    throw new TypeError('Promise constructor\\'s argument is not a function');\n  }\n  this._75 = 0;\n  this._83 = 0;\n  this._18 = null;\n  this._38 = null;\n  if (fn === noop) return;\n  doResolve(fn, this);\n}\nPromise._47 = null;\nPromise._71 = null;\nPromise._44 = noop;\n\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  if (this.constructor !== Promise) {\n    return safeThen(this, onFulfilled, onRejected);\n  }\n  var res = new Promise(noop);\n  handle(this, new Handler(onFulfilled, onRejected, res));\n  return res;\n};\n\nfunction safeThen(self, onFulfilled, onRejected) {\n  return new self.constructor(function (resolve, reject) {\n    var res = new Promise(noop);\n    res.then(resolve, reject);\n    handle(self, new Handler(onFulfilled, onRejected, res));\n  });\n}\nfunction handle(self, deferred) {\n  while (self._83 === 3) {\n    self = self._18;\n  }\n  if (Promise._47) {\n    Promise._47(self);\n  }\n  if (self._83 === 0) {\n    if (self._75 === 0) {\n      self._75 = 1;\n      self._38 = deferred;\n      return;\n    }\n    if (self._75 === 1) {\n      self._75 = 2;\n      self._38 = [self._38, deferred];\n      return;\n    }\n    self._38.push(deferred);\n    return;\n  }\n  handleResolved(self, deferred);\n}\n\nfunction handleResolved(self, deferred) {\n  asap(function() {\n    var cb = self._83 === 1 ? deferred.onFulfilled : deferred.onRejected;\n    if (cb === null) {\n      if (self._83 === 1) {\n        resolve(deferred.promise, self._18);\n      } else {\n        reject(deferred.promise, self._18);\n      }\n      return;\n    }\n    var ret = tryCallOne(cb, self._18);\n    if (ret === IS_ERROR) {\n      reject(deferred.promise, LAST_ERROR);\n    } else {\n      resolve(deferred.promise, ret);\n    }\n  });\n}\nfunction resolve(self, newValue) {\n  // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n  if (newValue === self) {\n    return reject(\n      self,\n      new TypeError('A promise cannot be resolved with itself.')\n    );\n  }\n  if (\n    newValue &&\n    (typeof newValue === 'object' || typeof newValue === 'function')\n  ) {\n    var then = getThen(newValue);\n    if (then === IS_ERROR) {\n      return reject(self, LAST_ERROR);\n    }\n    if (\n      then === self.then &&\n      newValue instanceof Promise\n    ) {\n      self._83 = 3;\n      self._18 = newValue;\n      finale(self);\n      return;\n    } else if (typeof then === 'function') {\n      doResolve(then.bind(newValue), self);\n      return;\n    }\n  }\n  self._83 = 1;\n  self._18 = newValue;\n  finale(self);\n}\n\nfunction reject(self, newValue) {\n  self._83 = 2;\n  self._18 = newValue;\n  if (Promise._71) {\n    Promise._71(self, newValue);\n  }\n  finale(self);\n}\nfunction finale(self) {\n  if (self._75 === 1) {\n    handle(self, self._38);\n    self._38 = null;\n  }\n  if (self._75 === 2) {\n    for (var i = 0; i < self._38.length; i++) {\n      handle(self, self._38[i]);\n    }\n    self._38 = null;\n  }\n}\n\nfunction Handler(onFulfilled, onRejected, promise){\n  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n  this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n  this.promise = promise;\n}\n\n/**\n * Take a potentially misbehaving resolver function and make sure\n * onFulfilled and onRejected are only called once.\n *\n * Makes no guarantees about asynchrony.\n */\nfunction doResolve(fn, promise) {\n  var done = false;\n  var res = tryCallTwo(fn, function (value) {\n    if (done) return;\n    done = true;\n    resolve(promise, value);\n  }, function (reason) {\n    if (done) return;\n    done = true;\n    reject(promise, reason);\n  });\n  if (!done && res === IS_ERROR) {\n    done = true;\n    reject(promise, LAST_ERROR);\n  }\n}\n","'use strict';\n\nvar Promise = require('./core.js');\n\nmodule.exports = Promise;\nPromise.prototype.done = function (onFulfilled, onRejected) {\n  var self = arguments.length ? this.then.apply(this, arguments) : this;\n  self.then(null, function (err) {\n    setTimeout(function () {\n      throw err;\n    }, 0);\n  });\n};\n","'use strict';\n\n//This file contains the ES6 extensions to the core Promises/A+ API\n\nvar Promise = require('./core.js');\n\nmodule.exports = Promise;\n\n/* Static Functions */\n\nvar TRUE = valuePromise(true);\nvar FALSE = valuePromise(false);\nvar NULL = valuePromise(null);\nvar UNDEFINED = valuePromise(undefined);\nvar ZERO = valuePromise(0);\nvar EMPTYSTRING = valuePromise('');\n\nfunction valuePromise(value) {\n  var p = new Promise(Promise._44);\n  p._83 = 1;\n  p._18 = value;\n  return p;\n}\nPromise.resolve = function (value) {\n  if (value instanceof Promise) return value;\n\n  if (value === null) return NULL;\n  if (value === undefined) return UNDEFINED;\n  if (value === true) return TRUE;\n  if (value === false) return FALSE;\n  if (value === 0) return ZERO;\n  if (value === '') return EMPTYSTRING;\n\n  if (typeof value === 'object' || typeof value === 'function') {\n    try {\n      var then = value.then;\n      if (typeof then === 'function') {\n        return new Promise(then.bind(value));\n      }\n    } catch (ex) {\n      return new Promise(function (resolve, reject) {\n        reject(ex);\n      });\n    }\n  }\n  return valuePromise(value);\n};\n\nPromise.all = function (arr) {\n  var args = Array.prototype.slice.call(arr);\n\n  return new Promise(function (resolve, reject) {\n    if (args.length === 0) return resolve([]);\n    var remaining = args.length;\n    function res(i, val) {\n      if (val && (typeof val === 'object' || typeof val === 'function')) {\n        if (val instanceof Promise && val.then === Promise.prototype.then) {\n          while (val._83 === 3) {\n            val = val._18;\n          }\n          if (val._83 === 1) return res(i, val._18);\n          if (val._83 === 2) reject(val._18);\n          val.then(function (val) {\n            res(i, val);\n          }, reject);\n          return;\n        } else {\n          var then = val.then;\n          if (typeof then === 'function') {\n            var p = new Promise(then.bind(val));\n            p.then(function (val) {\n              res(i, val);\n            }, reject);\n            return;\n          }\n        }\n      }\n      args[i] = val;\n      if (--remaining === 0) {\n        resolve(args);\n      }\n    }\n    for (var i = 0; i < args.length; i++) {\n      res(i, args[i]);\n    }\n  });\n};\n\nPromise.reject = function (value) {\n  return new Promise(function (resolve, reject) {\n    reject(value);\n  });\n};\n\nPromise.race = function (values) {\n  return new Promise(function (resolve, reject) {\n    values.forEach(function(value){\n      Promise.resolve(value).then(resolve, reject);\n    });\n  });\n};\n\n/* Prototype Methods */\n\nPromise.prototype['catch'] = function (onRejected) {\n  return this.then(null, onRejected);\n};\n","'use strict';\n\nvar Promise = require('./core.js');\n\nmodule.exports = Promise;\nPromise.prototype['finally'] = function (f) {\n  return this.then(function (value) {\n    return Promise.resolve(f()).then(function () {\n      return value;\n    });\n  }, function (err) {\n    return Promise.resolve(f()).then(function () {\n      throw err;\n    });\n  });\n};\n","'use strict';\n\nmodule.exports = require('./core.js');\nrequire('./done.js');\nrequire('./finally.js');\nrequire('./es6-extensions.js');\nrequire('./node-extensions.js');\nrequire('./synchronous.js');\n","'use strict';\n\n// This file contains then/promise specific extensions that are only useful\n// for node.js interop\n\nvar Promise = require('./core.js');\nvar asap = require('asap');\n\nmodule.exports = Promise;\n\n/* Static Functions */\n\nPromise.denodeify = function (fn, argumentCount) {\n  if (\n    typeof argumentCount === 'number' && argumentCount !== Infinity\n  ) {\n    return denodeifyWithCount(fn, argumentCount);\n  } else {\n    return denodeifyWithoutCount(fn);\n  }\n};\n\nvar callbackFn = (\n  'function (err, res) {' +\n  'if (err) { rj(err); } else { rs(res); }' +\n  '}'\n);\nfunction denodeifyWithCount(fn, argumentCount) {\n  var args = [];\n  for (var i = 0; i < argumentCount; i++) {\n    args.push('a' + i);\n  }\n  var body = [\n    'return function (' + args.join(',') + ') {',\n    'var self = this;',\n    'return new Promise(function (rs, rj) {',\n    'var res = fn.call(',\n    ['self'].concat(args).concat([callbackFn]).join(','),\n    ');',\n    'if (res &&',\n    '(typeof res === \"object\" || typeof res === \"function\") &&',\n    'typeof res.then === \"function\"',\n    ') {rs(res);}',\n    '});',\n    '};'\n  ].join('');\n  return Function(['Promise', 'fn'], body)(Promise, fn);\n}\nfunction denodeifyWithoutCount(fn) {\n  var fnLength = Math.max(fn.length - 1, 3);\n  var args = [];\n  for (var i = 0; i < fnLength; i++) {\n    args.push('a' + i);\n  }\n  var body = [\n    'return function (' + args.join(',') + ') {',\n    'var self = this;',\n    'var args;',\n    'var argLength = arguments.length;',\n    'if (arguments.length > ' + fnLength + ') {',\n    'args = new Array(arguments.length + 1);',\n    'for (var i = 0; i < arguments.length; i++) {',\n    'args[i] = arguments[i];',\n    '}',\n    '}',\n    'return new Promise(function (rs, rj) {',\n    'var cb = ' + callbackFn + ';',\n    'var res;',\n    'switch (argLength) {',\n    args.concat(['extra']).map(function (_, index) {\n      return (\n        'case ' + (index) + ':' +\n        'res = fn.call(' + ['self'].concat(args.slice(0, index)).concat('cb').join(',') + ');' +\n        'break;'\n      );\n    }).join(''),\n    'default:',\n    'args[argLength] = cb;',\n    'res = fn.apply(self, args);',\n    '}',\n    \n    'if (res &&',\n    '(typeof res === \"object\" || typeof res === \"function\") &&',\n    'typeof res.then === \"function\"',\n    ') {rs(res);}',\n    '});',\n    '};'\n  ].join('');\n\n  return Function(\n    ['Promise', 'fn'],\n    body\n  )(Promise, fn);\n}\n\nPromise.nodeify = function (fn) {\n  return function () {\n    var args = Array.prototype.slice.call(arguments);\n    var callback =\n      typeof args[args.length - 1] === 'function' ? args.pop() : null;\n    var ctx = this;\n    try {\n      return fn.apply(this, arguments).nodeify(callback, ctx);\n    } catch (ex) {\n      if (callback === null || typeof callback == 'undefined') {\n        return new Promise(function (resolve, reject) {\n          reject(ex);\n        });\n      } else {\n        asap(function () {\n          callback.call(ctx, ex);\n        })\n      }\n    }\n  }\n};\n\nPromise.prototype.nodeify = function (callback, ctx) {\n  if (typeof callback != 'function') return this;\n\n  this.then(function (value) {\n    asap(function () {\n      callback.call(ctx, null, value);\n    });\n  }, function (err) {\n    asap(function () {\n      callback.call(ctx, err);\n    });\n  });\n};\n","'use strict';\n\nvar Promise = require('./core.js');\n\nmodule.exports = Promise;\nPromise.enableSynchronous = function () {\n  Promise.prototype.isPending = function() {\n    return this.getState() == 0;\n  };\n\n  Promise.prototype.isFulfilled = function() {\n    return this.getState() == 1;\n  };\n\n  Promise.prototype.isRejected = function() {\n    return this.getState() == 2;\n  };\n\n  Promise.prototype.getValue = function () {\n    if (this._83 === 3) {\n      return this._18.getValue();\n    }\n\n    if (!this.isFulfilled()) {\n      throw new Error('Cannot get a value of an unfulfilled promise.');\n    }\n\n    return this._18;\n  };\n\n  Promise.prototype.getReason = function () {\n    if (this._83 === 3) {\n      return this._18.getReason();\n    }\n\n    if (!this.isRejected()) {\n      throw new Error('Cannot get a rejection reason of a non-rejected promise.');\n    }\n\n    return this._18;\n  };\n\n  Promise.prototype.getState = function () {\n    if (this._83 === 3) {\n      return this._18.getState();\n    }\n    if (this._83 === -1 || this._83 === -2) {\n      return 0;\n    }\n\n    return this._83;\n  };\n};\n\nPromise.disableSynchronous = function() {\n  Promise.prototype.isPending = undefined;\n  Promise.prototype.isFulfilled = undefined;\n  Promise.prototype.isRejected = undefined;\n  Promise.prototype.getValue = undefined;\n  Promise.prototype.getReason = undefined;\n  Promise.prototype.getState = undefined;\n};\n","'format es6';\n'use strict';\n\nimport Promise from 'promise';\nimport gsap, { TweenMax } from 'gsap';\nimport DrawSVG from './utils/DrawSVG.min';\nimport { isIE } from './utils/ieDetect';\n\nimport { Step, ENDED } from './Step';\n\nconst SVG_NS = 'http://www.w3.org/2000/svg';\n\nfunction makeCircle(cx, cy, r) {\n\treturn `\n\t\tM ${cx} ${cy}\n\t\tm ${-r}, 0\n\t\ta ${r},${r} 0 1,0 ${(r * 2)},0\n\t\ta ${r},${r} 0 1,0 ${-(r * 2)},0\n\t`;\n}\n\nclass Button {\n\tconstructor(data) {\n\t\tthis.data = data;\n\t\t\n\t\tthis.node = document.createElementNS(SVG_NS, 'path');\n\t\tthis.node.__btn = this;\n\t\tthis.node.setAttributeNS(null, 'd', makeCircle(data.x, data.y, data.r));\n\t\tthis.node.setAttributeNS(null, 'stroke', `rgba(255,255,255,${data.opacity})`);\n\t\tthis.node.setAttributeNS(null, 'fill', 'rgba(255,255,255,0)');\n\t\tthis.node.setAttributeNS(null, 'stroke-width', 8);\n\n\t\tthis.label = document.createElementNS(SVG_NS, 'text');\n\t\tthis.label.textContent = data.text_fr;\n\n\t\tif (data.label_pos === 'top') {\n\t\t\tthis.label.setAttributeNS(null, 'x', data.x);\n\t\t\tthis.label.setAttributeNS(null, 'y', data.y - data.r - 30);\n\t\t\tthis.label.setAttributeNS(null, 'text-anchor', 'middle');\n\t\t} else {\n\t\t\tthis.label.setAttributeNS(null, 'x', data.x + data.r + 30);\n\t\t\tthis.label.setAttributeNS(null, 'y', data.y);\n\t\t\tthis.label.setAttributeNS(null, 'text-anchor', 'start');\n\t\t}\n\n\t\tthis.node.style.transformOrigin = `50% 50%`;\n\t\t// TweenMax.set(this.node, { scale: 1, 'transform-origin':  });\n\t}\n\n\tanimateIn(delay) {\n\t\tif (!isIE) {\n\t\t\tTweenMax.from(this.node, 0.6, { drawSVG: '0%', ease: gsap.Sine.easeInOut, delay });\n\t\t} else {\n\t\t\tTweenMax.from(this.node, 0.3, { opacity: 0, ease: gsap.Sine.easeOut, delay });\n\t\t}\n\t}\n\n\tattach(ctn) {\n\t\tctn.appendChild(this.node);\n\t\tctn.appendChild(this.label);\n\t}\n\n\tremove() {\n\t\tthis.video.pause();\n\t\tthis.node.parentNode.removeChild(this.node);\n\t\tthis.label.parentNode.removeChild(this.label);\n\t}\n\n\tisGood = () => this.data.is_good;\n}\n\nfunction svgRemoveClass(elem, className) {\n\tif (elem.classList) {\n\t\telem.classList.remove(className);\n\t} else {\n\t\tconst c = elem.getAttribute('class');\n\t\telem.setAttribute('class', c.replace(className, '').trim());\n\t}\n}\n\nfunction svgAddClass(elem, className) {\n\tif (elem.classList) {\n\t\telem.classList.add(className);\n\t} else {\n\t\tconst c = elem.getAttribute('class');\n\t\telem.setAttribute('class', `${c} ${className}`);\n\t}\n}\n\nexport class InteractiveVideo extends Step {\n\tconstructor(infos) {\n\t\tsuper(infos);\n\t\tthis.video.loop = true;\n\t}\n\t\n\tvideoPromise = (state = 'success') => {\n\t\tthis.dispatchEvent({ type: ENDED, state });\n\t}\n\n\tsetListeners() {\n\t\tthis.onEnded = new Promise((resolve) => {\n\t\t\tthis.endedResolve = resolve;\n\t\t});\n\t}\n\n\tonClickButton = (e) => {\n\t\tconst clickedButton = e.currentTarget;\n\n\t\tlet index = -1;\n\t\tthis.clickedButtons.some((button, i) => {\n\t\t\tif (button === clickedButton.__btn) {\n\t\t\t\tindex = i;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\t\tconst id = index;\n\t\tif (id >= 0) {\n\t\t\tsvgRemoveClass(clickedButton, 'selected');\n\t\t\tthis.clickedButtons.splice(id, 1);\n\t\t} else {\n\t\t\tthis.clickedButtons.push(clickedButton.__btn);\n\t\t\tsvgAddClass(clickedButton, 'selected');\n\t\t}\n\n\t\tif (this.clickedButtons.length === this.goodButtons.length) {\n\t\t\tconst validate = this.goodButtons.filter(button => this.clickedButtons.find(btn => btn === button));\n\t\t\t// this.onEnded();\n\t\t\tthis.endedResolve(validate.length === this.goodButtons.length ? 'success' : 'fail');\n\t\t}\n\t}\n\t\n\tstart = () => {\n\t\tthis.setListeners();\n\t\tthis.video.currentTime = 0;\n\t\tthis.video.setAttribute('preload', 'preload');\n\t\tthis.video.setAttribute('autoplay', 'autoplay');\n\t\tthis.video.play();\n\n\t\tthis.caption = document.createElement('div');\n\t\tthis.caption.classList.add('caption');\n\t\tthis.caption.classList.add(this.description_position);\n\t\tthis.caption.innerHTML = this.description;\n\t\tthis.node.appendChild(this.caption);\n\n\t\tthis.svg = document.createElementNS(SVG_NS, 'svg');\n\t\tthis.svg.setAttributeNS(null, 'viewBox', '0 0 1920 1080');\n\t\tTweenMax.set(this.svg, {\n\t\t\tposition: 'absolute',\n\t\t\ttop: 0,\n\t\t\tleft: 0,\n\t\t\twidth: '100%',\n\t\t\theight: '100%',\n\t\t});\n\n\t\tthis.node.appendChild(this.svg);\n\n\t\tthis.goodButtons = [];\n\t\tthis.clickedButtons = [];\n\t\tthis.buttons = [];\n\t\tthis.choices.forEach((choice, i) => {\n\t\t\tconst btn = new Button(choice);\n\n\t\t\tbtn.node.addEventListener('click', this.onClickButton);\n\n\t\t\tbtn.attach(this.svg);\n\t\t\tbtn.animateIn(1 + (i * 0.1));\n\n\t\t\tif (btn.isGood()) {\n\t\t\t\tthis.goodButtons.push(btn);\n\t\t\t}\n\t\t});\n\t}\n\n\tremove() {\n\t\tthis.removeListeners();\n\t\tthis.buttons.forEach((btn) => {\n\t\t\tbtn.node.removeEventListener('click', this.onClickButton);\n\t\t\tbtn.remove();\n\t\t});\n\t\tthis.svg.parentNode.removeChild(this.svg);\n\t\tthis.node.parentNode.removeChild(this.node);\n\t}\n}\n","'format es6';\n'use strict';\n\nimport Promise from 'promise';\nimport { Step, ENDED } from './Step';\n\nexport const VIDEO_ENDED = 'video_ended';\n\nexport class LinearVideo extends Step {\n\tvideoPromise = () => {\n\t\tthis.endedResolve();\n\t}\n\n\tsetListeners() {\n\t\tthis.onEnded = new Promise((resolve) => {\n\t\t\tthis.endedResolve = resolve;\n\t\t\tthis.video.addEventListener('ended', this.videoPromise);\n\t\t});\n\t}\n\t\n\tstart() {\n\t\tthis.setListeners();\n\t\tthis.video.currentTime = 0;\n\t\tthis.video.setAttribute('preload', 'preload');\n\t\tthis.video.setAttribute('autoplay', 'autoplay');\n\t\tthis.video.play();\n\t}\n\n\tremove() {\n\t\tthis.removeListeners();\n\t\tthis.video.removeEventListener('ended', this.videoPromise);\n\n\t\tif (this.node.parentNode) {\n\t\t\tthis.node.parentNode.removeChild(this.node);\n\t\t}\n\t}\n}\n","'format es6';\n'use strict';\n\nimport 'babel-polyfill';\nimport { TweenMax } from 'gsap';\nimport Promise from 'promise';\nimport $ from 'jquery';\nimport { Step, VIDEO, INTERACTIVE, ENDED } from './Step';\nimport { LinearVideo } from './LinearVideo';\nimport { InteractiveVideo } from './InteractiveVideo';\n\n$(document).ready(() => {\n\tconst app = document.querySelector('#app');\n\tconst startApp = document.querySelector('#startApp');\n\tconst volume = document.querySelector('#volume');\n\tconst startUI = document.querySelector('.start-ui');\n\n\tconst styles = document.createElement('style');\n\tapp.appendChild(styles);\n\tstyles.innerHTML = '';\n\n\tconst steps = [];\n\n\tlet currentStep = null;\n\n\tfunction getStepBySlug(slug) {\n\t\treturn steps.find(step => step.slug === slug);\n\t}\n\t\n\tfunction preloadNextSteps(step) {\n\t\tconst nextSteps = [\n\t\t\tgetStepBySlug(step.next),\n\t\t\tgetStepBySlug(step.success),\n\t\t\tgetStepBySlug(step.fail),\n\t\t];\n\n\t\tnextSteps.filter(s => s).forEach((s) => {\n\t\t\tconsole.log('preloading', s.slug);\n\t\t\tconst canplay = () => {\n\t\t\t\ts.video.removeEventListener('canplay', canplay);\n\t\t\t};\n\t\t\ts.video.addEventListener('canplay', canplay);\n\t\t\ts.video.preload = 'auto';\n\t\t\ts.preattach(app, true);\n\t\t});\n\t}\n\n\tfunction manageVolume() {\n\t\tvolume.classList.toggle('muted');\n\t\tconst isMuted = volume.classList.contains('muted');\n\t\tsteps.forEach((s) => {\n\t\t\ts.video.muted = isMuted;\n\t\t});\n\t}\n\n\tfunction onResize() {\n\t\tconst width = window.innerWidth\n\t\t\t|| document.documentElement.clientWidth\n\t\t\t|| document.body.clientWidth;\n\n\t\tconst height = window.innerHeight\n\t\t\t|| document.documentElement.clientHeight\n\t\t\t|| document.body.clientHeight;\n\n\t\tlet computedWidth = width;\n\t\tlet computedMargin = 0;\n\n\t\tif (height < width / 16 * 9) {\n\t\t\tcomputedWidth = height / 9 * 16;\n\t\t\tcomputedMargin = (width - computedWidth) / 2;\n\t\t}\n\n\t\tstyles.innerHTML = `.ctn-step { \n\t\t\twidth: ${computedWidth}px;\n\t\t\tmargin-left: ${computedMargin}px;\n\t\t}`;\n\t}\n\t\n\tfunction doStep(step) {\n\t\tstep.attach(app);\n\t\tcurrentStep = step;\n\n\t\tstep.onEnded.then((e = null) => {\n\t\t\tstep.remove();\n\t\t\tlet nextId = step.next;\n\t\t\tif (e) {\n\t\t\t\tnextId = step[e];\n\t\t\t}\n\t\t\tconst next = getStepBySlug(nextId);\n\t\t\tif (!next) {\n\t\t\t\t//alert('end');\n\t\t\t\twindow.location.href = 'http://canada.arcelormittal.com/';\n\t\t\t} else {\n\t\t\t\tdoStep(next);\n\t\t\t}\n\t\t}).catch((e) => {\n\t\t\tconsole.log(e);\n\t\t\tconsole.trace();\n\t\t});\n\n\t\tpreloadNextSteps(step);\n\t}\n\n\tfunction onStart() {\n\t\tdoStep(steps[0]);\n\t\tTweenMax.set(startUI, { display: 'none' });\n\t\tTweenMax.set(volume, { display: '' });\n\t}\n\n\tTweenMax.set(startUI, { display: 'none' });\n\tTweenMax.set(volume, { display: 'none' });\n\n\t$.ajax({\n\t\turl: './js/manifest.json',\n\t\tsuccess: (data) => {\n\t\t\tdata.forEach((step) => {\n\t\t\t\tswitch (step.type) {\n\t\t\t\tdefault:\n\t\t\t\tcase VIDEO:\n\t\t\t\t\tsteps.push(new LinearVideo(step));\n\t\t\t\t\tbreak;\n\t\t\t\tcase INTERACTIVE:\n\t\t\t\t\tsteps.push(new InteractiveVideo(step));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\t\t\tTweenMax.set(startUI, { display: '' });\n\t\t},\n\t});\n\t\n\tdocument.addEventListener('keypress', (e) => {\n\t\tif (currentStep && (e.keyCode === 32 || e.which === 32)) {\n\t\t\tcurrentStep.video.currentTime = currentStep.video.duration - 2.5 || currentStep.video.currentTime;\n\t\t}\n\t});\n\t\n\twindow.addEventListener('resize', onResize);\n\tonResize();\n\tstartApp.addEventListener('click', onStart);\n\tvolume.addEventListener('click', manageVolume);\n});\n","'format es6';\n'use strict';\n\nimport EventDispatcher from './utils/EventDispatcher';\n\nexport const ENDED = 'step_ended';\n\nexport const VIDEO = 'video';\nexport const INTERACTIVE = 'interactive';\n\nexport class Step extends EventDispatcher {\n\tinfosToProps(infos) {\n\t\tObject.keys(infos).forEach((k) => {\n\t\t\tthis[k] = infos[k];\n\t\t});\n\t}\n\n\tonClickPlayPause = () => {\n\t\tthis.playPause.classList.toggle('playing');\n\n\t\tif (this.playPause.classList.contains('playing')) {\n\t\t\tthis.video.play();\n\t\t} else {\n\t\t\tthis.video.pause();\n\t\t}\n\t}\n\t\n\tconstructor(infos) {\n\t\tsuper();\n\t\t\n\t\tthis.infosToProps(infos);\n\n\t\tthis.node = document.createElement('div');\n\t\tthis.node.classList.add('ctn-step');\n\n\t\tthis.video = document.createElement('video');\n\n\t\tconst prefix = ~window.location.href.indexOf('workspace') ? 'videos/' : 'https://s3.amazonaws.com/arcelor-security-videos/';\n\n\t\tthis.video.src = prefix + this.video_src;\n\t\t// this.video.playbackRate = 3.0;\n\t\tthis.video.setAttribute('webkit-playsinline', 'webkit-playsinline');\n\t\tthis.video.setAttribute('playsinline', 'playsinline');\n\t\tthis.video.preload = 'none';\n\t\tthis.node.appendChild(this.video);\n\n\t\tthis.playPause = document.createElement('div');\n\t\tthis.playPause.classList.add('play-pause', 'playing');\n\t\tthis.node.appendChild(this.playPause);\n\n\t\tthis.playPause.removeEventListener('click', this.onClickPlayPause);\n\t\tthis.playPause.addEventListener('click', this.onClickPlayPause);\n\n\t\tthis.init();\n\t}\n\n\tinit() {}\n\tsetListeners() {}\n\tstart() {}\n\tremove() {}\n\n\tpreattach = (el, hidden = false) => {\n\t\tconsole.log('pre-attaching', this.slug);\n\t\tel.appendChild(this.node);\n\t\tthis.node.classList[hidden ? 'add' : 'remove']('inactive');\n\t}\n\n\tattach(el) {\n\t\tthis.preattach(el);\n\t\tthis.start();\n\t}\n}\n","/*!\n * VERSION: 0.0.5\n * DATE: 2015-05-19\n * UPDATES AND DOCS AT: http://greensock.com\n *\n * @license Copyright (c) 2008-2015, GreenSock. All rights reserved.\n * DrawSVGPlugin is a Club GreenSock membership benefit; You must have a valid membership to use\n * this code without violating the terms of use. Visit http://greensock.com/club/ to sign up or get more details.\n * This work is subject to the software agreement that was issued with your membership.\n * \n * @author: Jack Doyle, jack@greensock.com\n */\nvar _gsScope=\"undefined\"!=typeof module&&module.exports&&\"undefined\"!=typeof global?global:this||window;(_gsScope._gsQueue||(_gsScope._gsQueue=[])).push(function(){\"use strict\";function t(t,e,i,r){return i=parseFloat(i)-parseFloat(t),r=parseFloat(r)-parseFloat(e),Math.sqrt(i*i+r*r)}function e(t){return\"string\"!=typeof t&&t.nodeType||(t=_gsScope.TweenLite.selector(t),t.length&&(t=t[0])),t}function i(t,e,i){var r,s,n=t.indexOf(\" \");return-1===n?(r=void 0!==i?i+\"\":t,s=t):(r=t.substr(0,n),s=t.substr(n+1)),r=-1!==r.indexOf(\"%\")?parseFloat(r)/100*e:parseFloat(r),s=-1!==s.indexOf(\"%\")?parseFloat(s)/100*e:parseFloat(s),r>s?[s,r]:[r,s]}function r(i){if(!i)return 0;i=e(i);var r,s,n,a,o,l,h,u,f=i.tagName.toLowerCase();if(\"path\"===f)o=i.style.strokeDasharray,i.style.strokeDasharray=\"none\",r=i.getTotalLength()||0,i.style.strokeDasharray=o;else if(\"rect\"===f)s=i.getBBox(),r=2*(s.width+s.height);else if(\"circle\"===f)r=2*Math.PI*parseFloat(i.getAttribute(\"r\"));else if(\"line\"===f)r=t(i.getAttribute(\"x1\"),i.getAttribute(\"y1\"),i.getAttribute(\"x2\"),i.getAttribute(\"y2\"));else if(\"polyline\"===f||\"polygon\"===f)for(n=i.getAttribute(\"points\").split(\" \"),r=0,o=n[0].split(\",\"),\"polygon\"===f&&(n.push(n[0]),-1===n[0].indexOf(\",\")&&n.push(n[1])),l=1;n.length>l;l++)a=n[l].split(\",\"),1===a.length&&(a[1]=n[l++]),2===a.length&&(r+=t(o[0],o[1],a[0],a[1])||0,o=a);else\"ellipse\"===f&&(h=parseFloat(i.getAttribute(\"rx\")),u=parseFloat(i.getAttribute(\"ry\")),r=Math.PI*(3*(h+u)-Math.sqrt((3*h+u)*(h+3*u))));return r||0}function s(t,i){if(!t)return[0,0];t=e(t),i=i||r(t)+1;var s=a(t),n=s.strokeDasharray||\"\",o=parseFloat(s.strokeDashoffset),l=n.indexOf(\",\");return 0>l&&(l=n.indexOf(\" \")),n=0>l?i:parseFloat(n.substr(0,l))||1e-5,n>i&&(n=i),[Math.max(0,-o),n-o]}var n,a=document.defaultView?document.defaultView.getComputedStyle:function(){};n=_gsScope._gsDefine.plugin({propName:\"drawSVG\",API:2,version:\"0.0.5\",global:!0,overwriteProps:[\"drawSVG\"],init:function(t,e){if(!t.getBBox)return!1;var n,a,o,l=r(t)+1;return this._style=t.style,e===!0||\"true\"===e?e=\"0 100%\":e?-1===(e+\"\").indexOf(\" \")&&(e=\"0 \"+e):e=\"0 0\",n=s(t,l),a=i(e,l,n[0]),this._length=l+10,0===n[0]&&0===a[0]?(o=Math.max(1e-5,a[1]-l),this._dash=l+o,this._offset=l-n[1]+o,this._addTween(this,\"_offset\",this._offset,l-a[1]+o,\"drawSVG\")):(this._dash=n[1]-n[0]||1e-6,this._offset=-n[0],this._addTween(this,\"_dash\",this._dash,a[1]-a[0]||1e-5,\"drawSVG\"),this._addTween(this,\"_offset\",this._offset,-a[0],\"drawSVG\")),!0},set:function(t){this._firstPT&&(this._super.setRatio.call(this,t),this._style.strokeDashoffset=this._offset,this._style.strokeDasharray=(1===t||0===t)&&.001>this._offset&&10>=this._length-this._dash?\"none\":this._dash+\"px,\"+this._length+\"px\")}}),n.getLength=r,n.getPosition=s}),_gsScope._gsDefine&&_gsScope._gsQueue.pop()();","/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nexport default function EventDispatcher() {}\n\nObject.assign(EventDispatcher.prototype, {\n\taddEventListener(type, listener) {\n\t\tif (this._listeners === undefined) this._listeners = {};\n\n\t\tconst listeners = this._listeners;\n\n\t\tif (listeners[type] === undefined) {\n\t\t\tlisteners[type] = [];\n\t\t}\n\n\t\tif (listeners[type].indexOf(listener) === -1) {\n\t\t\tlisteners[type].push(listener);\n\t\t}\n\t},\n\n\thasEventListener(type, listener) {\n\t\tif (this._listeners === undefined) return false;\n\t\tconst listeners = this._listeners;\n\t\treturn listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n\t},\n\n\tremoveListeners() {\n\t\tthis._listeners = undefined;\n\t},\n\n\tremoveEventListener(type, listener) {\n\t\tif (this._listeners === undefined) return;\n\t\tconst listeners = this._listeners;\n\t\tconst listenerArray = listeners[type];\n\n\t\tif (listenerArray !== undefined) {\n\t\t\tconst index = listenerArray.indexOf(listener);\n\n\t\t\tif (index !== -1) {\n\t\t\t\tlistenerArray.splice(index, 1);\n\t\t\t}\n\t\t}\n\t},\n\n\tdispatchEvent(event) {\n\t\tif (this._listeners === undefined) return;\n\t\tconst listeners = this._listeners;\n\t\tconst listenerArray = listeners[event.type];\n\n\t\tif (listenerArray !== undefined) {\n\t\t\tevent.target = this;\n\t\t\tconst array = listenerArray.slice(0);\n\t\t\tfor (let i = 0, l = array.length; i < l; i++) {\n\t\t\t\tarray[i].call(this, event);\n\t\t\t}\n\t\t}\n\t},\n\n});\n","function detectIE() {\n\tvar ua = window.navigator.userAgent;\n  \n\t// Test values; Uncomment to check result …\n  \n\t// IE 10\n\t// ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n\t\n\t// IE 11\n\t// ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n\t\n\t// Edge 12 (Spartan)\n\t// ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n\t\n\t// Edge 13\n\t// ua = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2486.0 Safari/537.36 Edge/13.10586';\n  \n\tvar msie = ua.indexOf('MSIE ');\n\tif (msie > 0) {\n\t  // IE 10 or older => return version number\n\t  return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\n\t}\n  \n\tvar trident = ua.indexOf('Trident/');\n\tif (trident > 0) {\n\t  // IE 11 => return version number\n\t  var rv = ua.indexOf('rv:');\n\t  return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);\n\t}\n  \n\tvar edge = ua.indexOf('Edge/');\n\tif (edge > 0) {\n\t  // Edge (IE 12+) => return version number\n\t  return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);\n\t}\n  \n\t// other browser\n\treturn false;\n  }\n\nexport const isIE = detectIE();"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset:utf-8;base64,"}